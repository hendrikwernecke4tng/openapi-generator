<?php

declare(strict_types=1);

/**
 * FakeApiTest
 * PHP version 8.0
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Exception\GuzzleException;
use JsonException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\ObjectSerializer;
use OpenAPI\Client\Model\Client;
use DateTime;
use OpenAPI\Client\Model\FileSchemaTestClass;
use OpenAPI\Client\Model\HealthCheckResult;
use OpenAPI\Client\Model\OuterComposite;
use OpenAPI\Client\Model\OuterObjectWithEnumProperty;
use OpenAPI\Client\Model\Pet;
use SplFileObject;
use OpenAPI\Client\Model\User;
use PHPUnit\Framework\TestCase;

/**
 * FakeApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FakeApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for fakeHealthGet
     *
     * Health check endpoint.
     */
    public function testFakeHealthGet(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakeHttpSignatureTest
     *
     * test http signature authentication.
     */
    public function testFakeHttpSignatureTest(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakeOuterBooleanSerialize
     *
     * .
     */
    public function testFakeOuterBooleanSerialize(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakeOuterCompositeSerialize
     *
     * .
     */
    public function testFakeOuterCompositeSerialize(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakeOuterNumberSerialize
     *
     * .
     */
    public function testFakeOuterNumberSerialize(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakeOuterStringSerialize
     *
     * .
     */
    public function testFakeOuterStringSerialize(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fakePropertyEnumIntegerSerialize
     *
     * .
     */
    public function testFakePropertyEnumIntegerSerialize(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testBodyWithBinary
     *
     * .
     */
    public function testTestBodyWithBinary(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testBodyWithFileSchema
     *
     * .
     */
    public function testTestBodyWithFileSchema(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testBodyWithQueryParams
     *
     * .
     */
    public function testTestBodyWithQueryParams(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testClientModel
     *
     * To test \"client\" model.
     */
    public function testTestClientModel(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testEndpointParameters
     *
     * Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트.
     */
    public function testTestEndpointParameters(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testEnumParameters
     *
     * To test enum parameters.
     */
    public function testTestEnumParameters(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testGroupParameters
     *
     * Fake endpoint to test group parameters (optional).
     */
    public function testTestGroupParameters(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testInlineAdditionalProperties
     *
     * test inline additionalProperties.
     */
    public function testTestInlineAdditionalProperties(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testJsonFormData
     *
     * test json serialization of form data.
     */
    public function testTestJsonFormData(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for testQueryParameterCollectionFormat
     *
     * .
     */
    public function testTestQueryParameterCollectionFormat(): void
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
