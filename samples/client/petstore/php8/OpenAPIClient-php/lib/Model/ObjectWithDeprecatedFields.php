<?php

declare(strict_types=1);

/**
 * ObjectWithDeprecatedFields
 *
 * PHP version 8.0
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonException;
use JsonSerializable;
use Psr\Log\InvalidArgumentException;
use OpenAPI\Client\ObjectSerializer;

/**
 * ObjectWithDeprecatedFields Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed
 */
class ObjectWithDeprecatedFields implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     */
    protected static string $openAPIModelName = 'ObjectWithDeprecatedFields';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'uuid' => 'string',
        'id' => 'number',
        'deprecated_ref' => 'DeprecatedObject',
        'bars' => 'array',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'uuid' => null,
        'id' => null,
        'deprecated_ref' => null,
        'bars' => null,
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'uuid' => 'uuid',
        'id' => 'id',
        'deprecated_ref' => 'deprecatedRef',
        'bars' => 'bars'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'uuid' => 'setUuid',
        'id' => 'setId',
        'deprecated_ref' => 'setDeprecatedRef',
        'bars' => 'setBars'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'uuid' => 'getUuid',
        'id' => 'getId',
        'deprecated_ref' => 'getDeprecatedRef',
        'bars' => 'getBars'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['deprecated_ref'] = $data['deprecated_ref'] ?? null;
        $this->container['bars'] = $data['bars'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets uuid
     */
    public function getUuid(): ?string
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param ?string $uuid uuid
     *
     * @throws InvalidArgumentException
     */
    public function setUuid(?string $uuid): static
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets id
     */
    public function getId(): float|int|null
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|int|null $id id
     *
     * @throws InvalidArgumentException
     */
    public function setId(float|int|null $id): static
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets deprecated_ref
     */
    public function getDeprecatedRef(): ?DeprecatedObject
    {
        return $this->container['deprecated_ref'];
    }

    /**
     * Sets deprecated_ref
     *
     * @param ?DeprecatedObject $deprecated_ref deprecated_ref
     *
     * @throws InvalidArgumentException
     */
    public function setDeprecatedRef(?DeprecatedObject $deprecated_ref): static
    {
        $this->container['deprecated_ref'] = $deprecated_ref;

        return $this;
    }

    /**
     * Gets bars
     */
    public function getBars(): array|null
    {
        return $this->container['bars'];
    }

    /**
     * Sets bars
     *
     * @param string[]|null $bars bars
     *
     * @throws InvalidArgumentException
     */
    public function setBars(array|null $bars): static
    {
        $this->container['bars'] = $bars;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @throws JsonException
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
