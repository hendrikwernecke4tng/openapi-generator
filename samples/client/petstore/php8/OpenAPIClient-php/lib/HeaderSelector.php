<?php

declare(strict_types=1);

/**
 * ApiException
 *
 * PHP version 8.0
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAPI Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client;

/**
 * ApiException Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HeaderSelector
{

    /**
     * @param string[] $acceptHeaderValues
     * @param string[] $contentTypes
     */
    public function selectHeaders(array $acceptHeaderValues, array $contentTypes): array
    {
        $headers = [];

        $accept = $this->selectAcceptHeader($acceptHeaderValues);
        if ($accept !== null) {
            $headers['Accept'] = $accept;
        }

        $headers['Content-Type'] = $this->selectContentTypeHeader($contentTypes);
        return $headers;
    }

    /**
     * @param string[] $accept
     */
    public function selectHeadersForMultipart(array $accept): array
    {
        $headers = $this->selectHeaders($accept, []);

        unset($headers['Content-Type']);
        return $headers;
    }

    /**
     * Return the header 'Accept' based on an array of Accept provided
     *
     * @param string[] $acceptHeaderValues Array of header
     */
    private function selectAcceptHeader(array $acceptHeaderValues): ?string
    {
        if (count($acceptHeaderValues) === 0 || (count($acceptHeaderValues) === 1 && $acceptHeaderValues[0] === '')) {
            return null;
        }

        if ($jsonAccept = preg_grep(
            '~(?i)^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$~',
            $acceptHeaderValues
        )) {
            return implode(',', $jsonAccept);
        }

        return implode(',', $acceptHeaderValues);
    }

    /**
     * Return the content type based on an array of content-type provided
     *
     * @param string[] $contentType Array fo content-type
     */
    private function selectContentTypeHeader(array $contentType): string
    {
        if (count($contentType) === 0 || (count($contentType) === 1 && $contentType[0] === '')) {
            return 'application/json';
        }

        if (preg_grep("/application\/json/i", $contentType)) {
            return 'application/json';
        }

        return implode(',', $contentType);
    }
}
